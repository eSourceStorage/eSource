-- hi roblox deleted da module so now is here
--#robloxmoderationsucks 
local Blacklisted = {
	Groups = { -- ok
		{
			GroupId = 35670675;
			Ranks = 'all';
			Reason = 'being in shawns group (hes blacklisted)';
		},
		{
			
			GroupId = 17166497;
			Ranks = 'all';
			Reason = 'being in shawns group (hes blacklisted)';
		},--35332561
		{

			GroupId = 14474923;
			Ranks = 'all';
			Reason = 'Being in RCA Group (Blacklisted + Stealing products)';
		},

		{

			GroupId = 35332561;
			Ranks = 'all';
			Reason = "You can't join any games with eTech while being in blacklisted group 35332561, note to owner: no im pretty sure someone else owns the name mcronalds";
		},
	},
	Users = {
		--362649027
		{
			UserId = 3210583191;
			Reason = 'being shawn';
			ReasonFriendBlacklist = 'being friends with shawn';
			BlacklistFriends = true;
		},
		{
			UserId = 362649027;
			Reason = 'stealing assets, stealing from awaware';
			ReasonFriendBlacklist = 'being friends with texis guy (texas?)';
			BlacklistFriends = true;
		},
		
	},
    Games = {
        [117040561023078] = "you cant join this game as it has etech in it and it is blacklisted."
    },
} -- aaaa

Blacklisted.Check = function(Data)
    local g = Blacklisted.Games[game.GameId]
    local g2 = Blacklisted.Games[game.PlaceId]

    if g then
        return {true, g}
    end

    if g2 then
        return {true,g2}
    end

	for _, GroupData in pairs(Blacklisted.Groups) do
		if GroupData.Ranks == 'all' then
			if Data.User:GetRankInGroup(GroupData.GroupId) > 0 then
				return {true, GroupData.Reason}
			end
		else
			if table.find(GroupData.Ranks,Data.User:GetRankInGroup(GroupData.GroupId)) then
				return {true, GroupData.Reason}
			end
		end
	end
	
	for _, UserA in pairs(Blacklisted.Users) do
		if Data.User.UserId == UserA.UserId then
			return {true, UserA.Reason}
		end
		
		if UserA.BlacklistFriends == true then
			if Data.User:IsFriendsWith(UserA.UserId) then
				return {true, UserA.ReasonFriendBlacklist}
			end
		end
	end
	
	return {false, ""}
end

local Replace = {}

return {
GetBlacklist = function()
		return Blacklisted
	end,
	
	-- Should only be used on auto-update products
	-- that use HTTP and loadstring()
	GetCode = function(ProductName : string)
		
		if Replace[ProductName] ~= nil then
			ProductName = tostring(Replace[ProductName]) or ProductName
		end
		
		ProductName = tostring(ProductName) or 'Unknown'
		
		
		local URL = 'https://raw.githubusercontent.com/eSourceStorage/eSource/refs/heads/main/'..ProductName
		
		
		local response = nil
		
		-- Give the thing 5 attempts to get the code before it says goodbye
		local MAX_ATTEMPTS = 5
		for x = 1, MAX_ATTEMPTS do
			
			local s, r = pcall(function()
				return game.HttpService:GetAsync(URL)
			end)
			
			if s then
				response = r
				return response
			else
				if x > MAX_ATTEMPTS - 1 then
					warn('Error :: Failed to get code for '..ProductName)
					response = ''
					return response
				end
				for TIME = 5, 1, -1 do
					warn('Oops! Failed to load source, attempt '..x.."/"..MAX_ATTEMPTS..' retrying in ' .. TIME .. ' seconds')
					task.wait(1)
				end
				continue
			end
			
			
			
		end
	end,
}
